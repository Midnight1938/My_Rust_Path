#+title: Ownerships
#+date: <2023-07-31 Mon>
#+author: Skshm

All variable bindings have a scope where they are valid and it is an error to use a variable outside its scope.
At the end of the scope, the variable is dropped and the data is freed.

* Table Of Contents :toc:
- [[#moving][Moving]]
  - [[#move-semantics][Move Semantics]]
  - [[#moves-in-function-calls][Moves in Function Calls]]
- [[#copy---clone][Copy - Clone]]
  - [[#copying-and-cloning-are-not-the-same-thing][Copying and cloning are not the same thing:]]
- [[#borrowing][Borrowing]]
- [[#shared-and-unique-borrows][Shared and Unique Borrows]]
- [[#lifetimes][Lifetimes]]
  - [[#lifetimes-in-function-calls][Lifetimes in Function Calls]]
  - [[#lifetimes-in-data-structures][Lifetimes in Data Structures]]

* Moving
** Move Semantics
An assignment will transfer ownership between variables:
#+begin_src rust
fn main() {
    let s1: String = String::from("Hello!");
    let s2: String = s1;
    println!("s2: {s2}");
    // println!("s1: {s1}");
}
#+end_src
+ The assignment of s1 to s2 transfers ownership.
+ When s1 goes out of scope, nothing happens: it does not own anything.
+ When s2 goes out of scope, the string data is freed.
+ There is always exactly one variable binding which owns a value.
*** Extra Work in Modern C++
Modern C++ solves this differently:
#+begin_src cpp
std::string s1 = "Cpp";
std::string s2 = s1;  // Duplicate the data in s1.
#+end_src
+ The heap data from s1 is duplicated and s2 gets its own independent copy.
+ When s1 and s2 go out of scope, they each free their own memory.

** Moves in Function Calls
When you pass a value to a function, the value is assigned to the function parameter. This transfers ownership:
Rust does make it harder than C++ to inadvertently make copies by making the move semantic the default.
#+begin_src rust
  fn say_hello(name: String){
      println!("Hello there, {name}");
  }

  fn main(){
      let name = String::from("Whatever");
      say_hello(name);
      //say_hello(name); Wont Work, need to clone 
      //! say_hello(name.clone()); // Works
      //! say_hello(name);
  }
#+end_src
* Copy - Clone
While move semantics are the default, certain types are copied by default, like ints:
#+begin_src rust
  fn main(){
      let x = 4;
      let y = x;
      println!("X is {x}");
      println!("Y is {Y}, just like X!");
  }
#+end_src
These types implement the ~Copy~ trait.

You can opt-in your own types to use copy semantics:
#+begin_src rust
  #[derive(Copy, Clone, Debug)] // Tell em we will make our own
  struct Point(i32, i32); // Just a normal struct

  fn main() {
      let p1 = Point(3, 4);
      let p2 = p1;
      println!("p1: {p1:?}");
      println!("p2: {p2:?}");
  }
#+end_src
+ After the assignment, both =p1= and =p2= own their own data.
+ We can also use =p1.clone()= to explicitly copy the data.

** Copying and cloning are not the same thing:
Copying refers to bitwise copies of memory regions and does not work on arbitrary objects.
+ Copying does not allow for custom logic (unlike copy constructors in C++).
+ Cloning is a more general operation and also allows for custom behavior by implementing the Clone trait.
+ Copying does not work on types that implement the Drop trait.

In the above sample, try the following:
1. [X] Add a =String= field to =struct Point=. It will not compile because =String= is not a ~Copy~ type.
2. [X] Remove ~Copy~ from the ~derive~ attribute. The compiler error is now in the =println!= for =p1=.
3. [X] Show that it works if you clone =p1= instead.
* Borrowing
Instead of transferring ownership when calling a function, you can let a function borrow the value:
#+begin_src rust
  #[derive(Debug)]
  struct Point(i32, i32);

  fn add(p1: &Point, p2: &Point) -> Point {
      Point(p1.0+p2.0, p1.1+p2.0);
  }
  fn main(){
      let p1 = Point(3,4);
      let p2 = Point(6,8);   
  }
#+end_src
+ The =add= function ~borrows~ two points and returns a new point.
+ The caller retains ownership of the inputs.
* Shared and Unique Borrows
Rust puts constraints on the ways you can borrow values:
+ You can have one or more =&T= values at any given time
+ Or you can have exactly one =&mut T= value.
#+begin_src rust
  fn main() {
      let mut a: i32 = 10;
      let b: &i32 = &a;

      {
          let c: &mut i32 = &mut a;
          ,*c = 20;
      }

      println!("a: {a}");
      println!("b: {b}");
  }
#+end_src
+ The above code does not compile because =a= is ~borrowed~ as mutable (through =c=) and as immutable (through =b=) at the same time.
+ Move the =println!= statement for =b= before the ~scope~ that introduces =c= to make the code compile.
+ After that change, the compiler realizes that =b= is only ever used before the new mutable borrow of =a= through =c=. This is a feature of the borrow checker called /“non-lexical lifetimes”/.

* Lifetimes
A borrowed value has a lifetime:
+ The lifetime can be implicit: =add(p1: &Point, p2: &Point) -> Point=.
+ Lifetimes can also be explicit: =&'a Point=, =&'document str=.
+ Read =&'a= Point as “a borrowed ~Point~ which is valid for at least the lifetime a”.
+ Lifetimes are always inferred by the compiler: you cannot assign a lifetime yourself.
  - Lifetime annotations create constraints; the compiler verifies that there is a valid solution.
+ Lifetimes for function arguments and return values must be fully specified, but Rust allows lifetimes to be elided in most cases with a[[https:doc.rust-lang.org/nomicon/lifetime-elision.html][ few simple rules]].

** Lifetimes in Function Calls
In addition to borrowing its arguments, a function can return a borrowed value:
#+begin_src rust
  #[derive(Debug)]
  struct Point(i32, i32);

  fn left_most<'a>(p1: &'a Point, p2: &'a Point) -> &'a Point {
      if p1.0 < p2.0 { p1 } else { p2 }
  }

  fn main(){
      let p1 = point(2,3);
      let p2 = point(4,7);
      let p3 = left_most(p1,p2);
      println!("left-most point: {:?}", p3);
  }
#+end_src
+ ='a= is a generic parameter, it is inferred by the compiler.
+ Lifetimes start with ='= and ='a= is a typical default name.
+ Read =&'a= Point as “a borrowed ~Point~ which is valid for at least the lifetime a”.
  - The at least part is important when parameters are in different scopes.

In the following example, the program will not compile because p3 outlives the scope p2 lives in.
#+begin_src rust
  let p1: Point = Point(10, 10);
  let p3: &Point;
  {
      let p2: Point = Point(20, 20);
      p3 = left_most(&p1, &p2);
  }
  println!("left-most point: {:?}", p3);
#+end_src

** Lifetimes in Data Structures
If a data type stores borrowed data, it must be annotated with a lifetime:
#+begin_src rust
  #[derive(Debug)]
  struct Highlight<'doc>(&'doc str);

  fn erase(text: String) {
      println!("Bye {text}!");
  }

  fn main() {
      let text = String::from("The quick brown fox jumps over the lazy dog.");
      let fox = Highlight(&text[4..19]);
      let dog = Highlight(&text[35..43]);
      // erase(text);
      println!("{fox:?}");
      println!("{dog:?}");
  }
#+end_src
+ In the above example, the annotation on Highlight enforces that the data underlying the contained &str lives at least as long as any instance of Highlight that uses that data.
+ If text is consumed before the end of the lifetime of fox (or dog), the borrow checker throws an error.
+ Types with borrowed data force users to hold on to the original data. This can be useful for creating lightweight views, but it generally makes them somewhat harder to use.
+ When possible, make data structures own their data directly.
+ Some structs with multiple references inside can have more than one lifetime annotation. This can be necessary if there is a need to describe lifetime relationships between the references themselves, in addition to the lifetime of the struct itself. Those are very advanced use cases.
