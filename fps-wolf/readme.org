#+title: FPS with raycasting in Rust and wasm
#+date: <2023-07-13 Thu>

* [[https://grantshandy.github.io/posts/raycasting/#the-algorithm][Algorithm]]
** Basics
Raycasting basically builds on the fact that things that are further away seem smaller. It takes that and draws walls at shorter heights the further away from the player they are.
That works by tracing a path from the player to the closest wall for each column in the players view. It then records the distances of each path before converting it into the height of a wall and drawing it on screen as a vertical line.
** Deeper Issues
The hardest part is stopping at the nearest wall. Which might seem simple on paper but can be pretty difficult.
A simple way would be to keep extending a ray by somea mount and stopping when we hit something. But that might cause us to miss the wall completely. And even if it does hit one itll just know that it hit one, not where it starts.

One way to do that is to align all walls to a grid. So if we know that the walls fall at predictable intervals, we can calculate a reliable distance to extend the ray each time.

** Intersections
Once we extend the ray to the first grid line we can calculate these shared “extension widths” and “extension heights”.
Then we repeatedly extend it by these widths and heights to get the closest “vertical wall” and “horizontal wall” then use the smaller of the two distances.
*** Horizontal
In horizontal wall intersections the height between “extensions” is always one, while the width between extensions can be derived from the angle of the ray. We always move up or down by exactly one and right or left by an amount determined by the angle of the ray.
ΔW=ΔH.tan⁡(θ) or ΔW = ΔH​ / tan(θ)
*** Vertical
Vertical grid intersections are the same as horizontal grid intersections, just rotated 90°. In vertical grid intersections the width between our “ray extensions” is constant while the height is created from the angle of the ray.
ΔH=ΔW.tan(θ) or ΔH=ΔW / tan(θ)
* Source
We use [[https:rust-lang.org/][Rust]] and [[https:wasm4.org/][wasm4]] to implement this thing.
** Wasm4
It has the following specs:
#+begin_quote
Display: 160x160 pixels, 4 customizable colors, updated at 60 Hz.
Memory: 64 KB linear RAM, memory-mapped I/O, save states.
Cartridge Size Limit: 64 KB.
Input: Keyboard, mouse, touchscreen, up to 4 gamepads.
Audio: 2 pulse wave channels, 1 triangle wave channel, 1 noise channel.
Disk Storage: 1024 bytes.
#+end_quote
** Setup
*** Make a project
#+begin_src bash
  rustup target add wasm32-unknown-unknown
  cargo new raycaster --lib
#+end_src
*** Cargo.toml
**** Deps
We tell cargo that we want to produce a C-like dynamic library (.wasm), and optimize the binary for size.
And import =libm=, a library that will provide us with some =no_std= implementations of functions we need like =sin=, =tan=, and =floor=.
#+begin_src toml
  [lib]
  crate-type = ["cdylib"]

  [profile.release]
  opt-level = "z"
  lto = true
  codegen-units = 1
  strip = true
  panic = "abort"

  [dependencies]
  libm = "0.2"
#+end_src
**** build config
#+begin_src toml
  [build]
  target = "wasm32-unknown-unknown"

  [target.wasm32-unknown-unknown]
  rustflags = [
      "-C", "link-arg=--import-memory",
      "-C", "link-arg=--initial-memory=65536",
      "-C", "link-arg=--max-memory=65536",
      "-C", "link-arg=-zstack-size=14752",
  ]
#+end_src
*** Build and run
- To build with rust
  #+begin_src bash
    cargo build --release
  #+end_src
- To run in w4
  #+begin_src bash
    w4 run-native target/wasm32-unknown-unknown/release/raycaster.wasm
  #+end_src
- Makefile to handle that:
  #+begin_src makefile
    all:
        cargo build --release

    run: all
        w4 run-native target/wasm32-unknown-unknown/release/raycaster.wasm
  #+end_src
